// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model User {
  id String @id 
  email String @unique
  password String @unique
  role String
  
}

//estruturar todas as relações que faltam
//considerar o sala_simulado e os posts de questões

model Aluno {
id String @id @default(uuid())
avatar Bytes? 
username String
email String @unique
telefone String
parent_name String
telefone_parent_1 String
telefone_parent_2 String
password String @unique
role String
matricula String @unique
turma String 
salas Salas_Alunos[]
scores Score[]
desempenhos desempenho[]
comments Comment[]


}
model Coordenador {
id String @id @default(uuid())
username String
avatar Bytes? 
password String @unique
role String
telefone1 String 
telefone2 String
email String @unique
email_profissional String @unique
endereco String 
cep String @unique
turmas Turma[]
sala Salas[]
}
model Professor {
 id String @id @default(uuid())
 avatar Bytes? 
 username String
 email String @unique
 email_profissional String @unique
 cpf String?
 endereco String
 titulacao String
 telefone1 String @unique
 telefone2 String @unique
 password String @unique
 subject String 
 role String
 simulado Simulado[]
 questoes Questao[]
 posts Post[]  
 sala Salas[]
 comments Comment[]
}

model Post{
  id String @id @default(uuid())
  idProfessor String
  professor Professor? @relation(fields: [idProfessor] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
  type String
  comments Comment[]
}
model Comment{
  id String @id @default(uuid())
  isPrivate Boolean?
  content String
  postId String
  post Post? @relation(fields: [postId],references: [id] , onDelete: Cascade , onUpdate: Cascade)
  alunoId String 
  aluno Aluno? @relation(fields: [alunoId], references: [id], onDelete: Cascade , onUpdate: Cascade)
  professorId String
  professor Professor? @relation(fields: [professorId] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
}

model Turma {
    id String @id @default(uuid())
    salas Salas[]
    idCoordenador String
    coordenador Coordenador? @relation(fields: [idCoordenador] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
    turma_name String @unique
}
model Salas {
    id String @id @default(uuid())
    sala_name String @unique
    avatar Bytes?
    turmaId String
    turma Turma? @relation(fields: [turmaId] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
    alunos Salas_Alunos[]
    coordenadorId String?
    coordenador Coordenador? @relation(fields: [coordenadorId] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
    professorId String?
    professor Professor? @relation(fields: [professorId] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
    simulados Simulado[]
}
model Questao{
 id String @id @default(uuid())
 title String @db.VarChar(200)
 text String @db.LongText
 subject String
 imageBase64 Bytes?
 alternativa1 String? @db.LongText
 alternativa2 String? @db.LongText
 alternativa3 String? @db.LongText
 alternativa4 String? @db.LongText
 alternativa5 String? @db.LongText
 resposta String? @db.LongText
 
  simulado Simulado? @relation(fields: [idQuiz] , references: [id], onDelete: Cascade , onUpdate: Cascade)
  idQuiz String
  idProfessor String
  professor Professor? @relation(fields: [idProfessor] , references: [id] , onDelete: Cascade , onUpdate: Cascade)

}
model Simulado{
  id String @id @default(uuid())
  subject String
  questoes Questao[]
  qtdQuestao String
  professor Professor? @relation(fields: [idProfessor] , references: [id] , onDelete:Cascade , onUpdate: Cascade)
  idProfessor String
  salaId String
  sala Salas? @relation(fields: [salaId] , references: [id] , onDelete: Cascade, onUpdate: Cascade)
  scores Score[]
  desempenhos desempenho[]

}

//individualmente , passo do client o score do aluno
//depois , salvo o score individual de cada aluno - em tempo real- e retorno pro
//client um array de objetos em que cada obj é o nome e o ra de um aluno com seu respectivo score
//assim todo mundo vai conseguir ver simultâneamente

model Score{
  id String @id @default(uuid())
  student_score Int?
  idQuiz String
  simulado Simulado? @relation(fields: [idQuiz] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
  alunoId String
  aluno Aluno? @relation(fields: [alunoId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
}
model desempenho{
  id String @id @default(uuid())
  alunoId String
  aluno Aluno? @relation(fields: [alunoId] , references: [id], onDelete: Cascade , onUpdate: Cascade)
  simuladoId String
  simulado Simulado? @relation(fields: [simuladoId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
  matematica_correct_answers Int?
  portugues_correct_answers Int?
  fisica_correct_answers Int?
  quimica_correct_answers Int?
  biologia_correct_answers Int?
}




model OtpUser{
  id String @id
  email String @unique
  otpCode String 
}


model Salas_Alunos {
  idAluno String
  aluno Aluno? @relation(fields: [idAluno], references: [id] , onDelete: Cascade , onUpdate: Cascade)
  idSala String
  sala Salas? @relation(fields: [idSala], references: [id] , onDelete: Cascade , onUpdate: Cascade)
  @@id([idAluno, idSala])

}
